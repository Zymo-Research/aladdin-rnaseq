/*
 * -------------------------------------------------
 *  Aladdin rnaseq Nextflow config file
 * -------------------------------------------------
 */

// Global default params, used in configs
params {

  // Pipeline Options
  // Workflow input
  design = false
  merged_counts = false

  // References
  genome = false
  genomes_path = 'https://raw.githubusercontent.com/Zymo-Research/pipeline-resources/main/genomes/rnaseq_aladdin.json'
  public_genomes_only = false
  ercc_spikein = 0 // whether ERCC spike-in was used. Possible values: 1 or 2

  // Trimming
  protocol = false
  protocols_path = 'https://raw.githubusercontent.com/Zymo-Research/pipeline-resources/main/protocols/rnaseq.json'
  trim_nextseq = false
  adapter_overlap = 1
  min_read_length = 20
  save_trimmed = false
  skip_trimming = false

  // Alignment
  save_unaligned = false
  save_secondary_alignments = false
  star_min_overlap = 10 // STAR minimum overlap bases for merging overlapping paired-end reads
  star_max_overlap_mismatch = 0.01 // STAR maximum mismatch ratio in the overlap region for merging overlapping paired-end reads
  star_twopass = false // use two-pass mode in STAR, useful for discovering novel junctions
  percent_mapped_cutoff = 5 // the least percentage of reads mapped required for a sample to proceed past alignment

  // Read Counting
  fc_extra_attributes = 'gene_name'
  fc_group_features = 'gene_id'
  fc_count_type = 'exon'
  fc_biotype_count_type = 'exon' // if using supplemental rRNA gtf files, only 'gene' and 'exon' are available
  fc_biotype_group_features = 'gene_biotype'
  skip_biotype_qc = false
  gene_detection_method = 'reads' // Only 'reads', 'fpkm', 'tpm' are valid options
  
  // QC
  skip_qc = false
  skip_fastqc = false
  skip_rseqc = false
  skip_qualimap = false
  skip_preseq = false
  skip_markduplicates = false
  skip_dupradar = false
  skip_multiqc = false

  // Comparisons
  skip_deseq2 = false
  deseq2_fdr = 0.05
  deseq2_lfc = 0 // Please use log2 values of desired fold change cutoff, for example, log2(1.5)=0.585
  comparisons = false
  gprofiler_fdr = 0.05

  // Max resources, expected to be overwritten if run on your own system
  max_memory = 60.GB
  max_cpus = 8
  max_time = 48.h

  // Other Defaults
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  multiqc_config_3mrna = "$baseDir/assets/multiqc_3mrna_config.yaml"
  outdir = './results'
  name = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'us-east-1'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Docker container
process.container = 'zymoresearch/aladdin-rnaseq:1.0.0'

// Profiles config
profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  docker { docker.enabled = true }
  test { includeConfig 'conf/test.config' }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'Zymo-Research/aladdin-rnaseq'
  author = 'Zhenfeng Liu, Mingda Jin, Yi Xu'
  homePage = 'https://github.com/Zymo-Research/aladdin-rnaseq'
  description = 'Bulk RNA-Seq analysis pipeline, part of the Aladdin Bioinformatics Platform pipeline catalog.'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.07.1'
  version = '0.0.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
