#!/usr/bin/env python

"""MultiQC plugin module to process download links and generate a section in 
the report containing these links."""

from __future__ import print_function
import logging

from multiqc import config
from multiqc.plots import table
from multiqc.modules.base_module import BaseMultiqcModule

from collections import OrderedDict, defaultdict
import json

# Initialise the main MultiQC logger
log = logging.getLogger("multiqc")

class MultiqcModule(BaseMultiqcModule):

    def __init__(self):

        # Halt execution if we've disabled the plugin
        if config.kwargs.get('disable_plugin', False) is True:
            return None
                          
        link_duration = getattr(config, "cloudfront_link_duration", 60)
        
        # Initialise the parent module Class object
        super(MultiqcModule, self).__init__(
            name = "Download data",
            target = "",
            anchor = "download_data",
            comment = ("Links in this section expire after **{} days**. If you want to "
                       "download files after that, please contact us.").format(link_duration),
            info = ("This section contains links to download your original data, "
                    "and data and/or images generated by various bioinformatics tools. "
                    "There may be files for each sample, files for all samples, and files for group comparisons. "
                    "To download individual files, click on the corresponding links. "
                    "There are also instructions at the bottom of the this section "
                    "if you want to download everything in batch.")
        )

        # Initialize the data dict
        self.links = dict()
        # Find the data files
        for f in self.find_log_files("download_data", filehandles=True):
            # Parse the data file
            self.add_data_source(f)
            self.links = json.load(f['f'])
        
        # Nothing found - raise a UserWarning to tell MultiQC
        if len(self.links) == 0:
            log.debug("Could not find any download links in {}".format(config.analysis_dir))
            raise UserWarning
        
        # Extract link to the script that downloads all files
        if "download_links.ps1" in self.links:
            self.link_of_links = self.links.pop("download_links.ps1")
        else:
            self.link_of_links = False
            log.warning("A link to script that downloads all files does not exist!")
        
        log.info("Found {} download links".format(len(self.links)))

        # Parse file names and find out which part they belong to
        self.sample_files = defaultdict(dict)
        self.all_files = defaultdict(dict)
        self.comparison_files = defaultdict(dict)
        self.parse_links()

        # Plot sample level data
        if len(self.sample_files):
            self.plot_sample_level()

        # Plot all-samples level data
        if len(self.all_files):
            self.plot_all_samples_level()

        # Plot comparison level data
        if len(self.comparison_files):
            self.plot_comparison_level()
        
        # Add instructions to download all
        if self.link_of_links:
            self.plot_download_all()

    def parse_links(self):
        patterns = {
            "_R1.fastq.gz" : (self.sample_files, "Read 1", "FASTQ"),
            "_R2.fastq.gz" : (self.sample_files, "Read 2", "FASTQ"),
            ".markDups.bam" : (self.sample_files, "Alignment", "BAM"),
            "Aligned.sortedByCoord.out.bam" : (self.sample_files, "Alignment", "BAM"),
            "merged_gene_counts.txt" : (self.all_files, "raw_counts", "Raw read counts of genes"),
            "normalized_counts.xlsx" : (self.all_files, "norm_counts", "Normalized read counts of genes"),
            "DESeq2_sample_MDS_plot.jpg" : (self.all_files, "mds_plot", "MDS plot of samples"),
            "DESeq2_sample_similarity_matrix.jpg" : (self.all_files, "similarity_matrix", "Similarity matrix of samples"),
            "DESeq2_top_gene_heatmap.jpg" : (self.all_files, "gene_heatmap", "Heatmap of expression of top genes"),
            "_DESeq_results.xlsx" : (self.comparison_files, "comparison_results", "XLSX"),
            "_DESeq_MA_plot.jpg" : (self.comparison_files, "MA_plot", "JPG"),
            "_DESeq_scatterplot.jpg" : (self.comparison_files, "scatter_plot", "JPG"),
            "_gProfiler_results.xlsx" : (self.comparison_files, "pathway_analysis", "XLSX")
        }
        for filename, address in self.links.items():
            for suffix, values in patterns.items():
                if filename.endswith(suffix):
                    sample_name = filename.replace(suffix, "")
                    if sample_name == "":
                        sample_name = "all"
                    data_dict, sub_category, link_text = values
                    data_dict[sample_name][sub_category] = "<a href='{}'>{}</a>".format(address, link_text)
                    break
            else:
                log.debug("Found unexpected download link for {}".format(filename))

    def plot_sample_level(self):
        """Create a table to deliver sample level files"""
        headers = OrderedDict()
        headers["Read 1"] = {
            "title": "Read #1",
            "description": "Read #1 FASTQ files"
        }
        headers["Read 2"] = {
            "title": "Read #2",
            "description": "Read #2 FASTQ files"
        }
        headers["Alignment"] = {
            "title": "Alignment",
            "description": "Alignment to genome",
            "namespace": "STAR"
        }
        table_config = {
            "id": "sample_level_files_table",
            "col1_header": "Sample Name",
            "sortRows": True,
            "scale": False
        }
        table_plot_html = table.plot(self.sample_files, headers, table_config)
        self.add_section(
            name = "Sample level files",
            anchor = "sample_level_files_table",
            plot = table_plot_html
        )

    def plot_all_samples_level(self):
        """Create a list of files that relates to all samples"""
        content = ("These files provide an overview of all samples "
                  "(some of these are already displayed interactively "
                  "for you in sections above):<br>\n<ul>\n")
        for name in ["raw_counts", "norm_counts", "mds_plot", "similarity_matrix", "gene_heatmap"]:
            if name in self.all_files["all"]:
                content += "<li>{}</li>\n".format(self.all_files["all"][name])
        content += "</ul>\n"
        self.add_section(
            name = "Files concerning all samples",
            anchor = "all_samples_files",
            content = content
        )

    def plot_comparison_level(self):
        """Create a table to deliver comparison level files"""
        headers = OrderedDict()
        headers["comparison_results"] = {
            "namespace": "DESeq2",
            "title": "DEG comparison results",
            "description": "Differential gene expression results generated by DESeq2"
        }
        headers["MA_plot"] = {
            "namespace": "DESeq2",
            "title": "MA plot",
            "description": "MA plot showing distribution of gene expression patterns"
        }
        headers["scatter_plot"] = {
            "namespace": "DESeq2",
            "title": "Scatter plot",
            "description": "Scatter plot showing gene expression levels between two groups"
        }
        headers["pathway_analysis"] = {
            "namespace": "gProfiler",
            "title": "Pathway enrichment results",
            "description": "Pathway enrichment analysis results by gProfiler"
        }
        table_config = {
            "id": "comparison_level_files_table",
            "col1_header": "Comparison(group1_vs_group2)",
            "sortRows": True,
            "scale": False
        }
        table_plot_html = table.plot(self.comparison_files, headers, table_config)
        self.add_section(
            name = "Comparison level files",
            anchor = "comparison_level_files_table",
            plot = table_plot_html
        )

    def plot_download_all(self):
        """Add instructions to download all files"""
        self.add_section(
            name = "Instructions to download all files",
            anchor = "download_all_files",
            content = (
                "<ol>\n"
                "<li>Download <strong><a href='{}'>a script to download all files</a></strong>. "
                "We assume it is in your <em>Downloads</em> folder.</li>\n"
                "<li>Find and open Terminal(Mac/Linux) or Windows Powershell(Windows).</li>\n"
                "<li>Type <code>cd ~/Downloads</code> and Enter. "
                "(If your download folder is different, please change accordingly)</li>\n"
                "<li>Copy and Paste <code>bash download_links.ps1</code> (Mac/Linux) "
                "or <code>Powershell.exe -ExecutionPolicy Bypass -File .\download_links.ps1</code> (Windows) and Enter.</li>\n"
                "</ol>\n"
            ).format(self.link_of_links)
        )
